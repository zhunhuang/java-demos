package helper.util;

import com.google.common.base.Charsets;
import com.google.common.io.Files;

import java.io.File;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * description:
 * 如何将mysql 的建表语句转成h2, 参考：http://matthewcasperson.blogspot.com/2013/07/exporting-from-mysql-to-h2.html
 * <p>
 * 修改单引号
 * 修改16进制数
 * Fix up bits
 * Don't include ranges in keys
 * Remove character sets (remove CHARACTER SET ...)
 * Remove COLLATE settings (f.e. COLLATE utf8_unicode_ci)
 * Remove indexes on BLOBS, CLOBS and TEXT fields
 * Make all index names unique
 * Use the MySQL compatibility mode (jdbc:h2:~/test;MODE=MySQL)
 * fix auto update  syntax  (ON UPDATE CURRENT_TIMESTAMP -> AS CURRENT_TIMESTAMP)
 * <p>
 * 以下需要暂时手动更改：
 * Fix up hex numbers：如果sql中有16进制数，需要手动修改：finding 0x([A-F0-9]*) and replacing it with '$1'.
 *
 * @author zhunhuang, 2019/11/21
 */
public class TransformMysqlToH2 {

    public static void main(String[] args) throws Exception {
        // 改成你的项目根路径
        File mysqlFile = new File("/Users/zhunhuang/Documents/project/github/personal/java-demos/springboottest/src/main/resources/sql/schema.sql");
        File h2File = new File("/Users/zhunhuang/Documents/project/github/personal/java-demos/springboottest/src/test/resources/sql/schema.sql");
        transformFile(mysqlFile, h2File);

    }

    private static void transformFile(File mysqlSchemaSourceFile, File h2SchemaTestFile) throws IOException {
        String sourceContent = Files.toString(mysqlSchemaSourceFile, Charsets.UTF_8);
        String targetContent = transform(sourceContent);
        Files.write(targetContent, h2SchemaTestFile, Charsets.UTF_8);
        System.out.println(targetContent);
    }

    private static String transform(String sourceContent) {
        String alert = "--  auto generated by TransformMysqlToH2 \n";

        // Use the MySQL compatibility mode
        sourceContent = "SET MODE MYSQL;\n\n" + sourceContent;

        // 去掉反引号
        sourceContent = sourceContent.replaceAll("`", "");
        // Remove COLLATE settings
        sourceContent = sourceContent.replaceAll("COLLATE.*(?=NOT)", "");
        sourceContent = sourceContent.replaceAll("COLLATE.*(?=DEFAULT)", "");
        // Remove character sets
        sourceContent = sourceContent.replaceAll("CHARACTER.*(?=NOT)", "");
        sourceContent = sourceContent.replaceAll("CHARACTER.*(?=DEFAULT)", "");


        sourceContent = sourceContent.replaceAll("COMMENT.*'(?=,)", "");
        sourceContent = sourceContent.replaceAll("\\).*ENGINE.*(?=;)", ")");
        sourceContent = sourceContent.replaceAll("\\).*ENGINE.*(?=')", ")");

        // fix auto update  syntax
        sourceContent = sourceContent.replaceAll("DEFAULT .* ON UPDATE CURRENT_TIMESTAMP", " AS CURRENT_TIMESTAMP");

        // Make all index names unique
        sourceContent = uniqueKey(sourceContent);

        sourceContent = alert + sourceContent;
        return sourceContent;
    }

    /**
     * h2的索引名必须全局唯一
     *
     * @param content sql建表脚本
     * @return 替换索引名为全局唯一
     */
    private static String uniqueKey(String content) {
        int inc = 0;
        Pattern pattern = Pattern.compile("(?<=KEY )(.*?)(?= \\()");
        Matcher matcher = pattern.matcher(content);
        StringBuffer sb = new StringBuffer();
        while (matcher.find()) {
            matcher.appendReplacement(sb, matcher.group() + inc++);
        }
        matcher.appendTail(sb);
        content = sb.toString();
        return content;
    }


}
