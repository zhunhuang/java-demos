<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.1.xsd"
       default-autowire="byName">

    <!--登录页面不过滤 -->
    <security:http pattern="/login.jsp" security="none" />
    <security:http access-denied-page="/403.jsp">
        <security:form-login login-page="/login.jsp" />
        <!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限,可以在这里配置, 也可以通过自定义拦截器来配置 -->
        <!--<intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" /> -->
        <!--访问/**资源的用户必须具有ROLE_USER的权限 -->
        <!-- <intercept-url pattern="/**" access="ROLE_USER" /> -->
        <!--防止多个用户同时登陆一个账号-->
        <security:session-management>
            <security:concurrency-control max-sessions="1"
                                 error-if-maximum-exceeded="false" />
        </security:session-management>
        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
        <security:custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
    </security:http>
    <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
        我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <bean id="myFilter"
            class="platform.security.filter.MyFilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
        <property name="securityMetadataSource" ref="securityMetadataSource" />
    </bean>
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="myUserDetailService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
        </security:authentication-provider>
    </security:authentication-manager>
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
    <bean id="myUserDetailService" class="platform.security.service.ConfigurableUserDetailService" />
    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <bean id="myAccessDecisionManagerBean"
            class="platform.security.service.ConfigurableAccessDecisionManager">
        <constructor-arg type="java.util.List">
            <bean class="org.springframework.security.access.vote.RoleVoter"/>
        </constructor-arg>
    </bean>
    <!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <bean id="securityMetadataSource"
            class="platform.security.service.MyInvocationSecurityMetadataSource" />

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="suffix" value=".jsp"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="prefix" value="/WEB-INF/views/"/>
    </bean>

</beans>
